{"remainingRequest":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/src/views/article/ArticleList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/src/views/article/ArticleList.vue","mtime":1655045915171},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/cache-loader/dist/cjs.js","mtime":1654979193161},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/thread-loader/dist/cjs.js","mtime":1654979231759},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/babel-loader/lib/index.js","mtime":1654979188012},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/cache-loader/dist/cjs.js","mtime":1654979193161},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/vue-loader/lib/index.js","mtime":1654979235508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
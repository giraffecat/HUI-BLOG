{"remainingRequest":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/src/views/article/Article.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/src/views/article/Article.vue","mtime":1655044719813},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/cache-loader/dist/cjs.js","mtime":1654979193161},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/thread-loader/dist/cjs.js","mtime":1654979231759},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/babel-loader/lib/index.js","mtime":1654979188012},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/cache-loader/dist/cjs.js","mtime":1654979193161},{"path":"/Users/zhonghui/Desktop/Hui Blog/blog-admin/admin/node_modules/vue-loader/lib/index.js","mtime":1654979235508}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGltYWdlQ29udmVyc2lvbiBmcm9tICJpbWFnZS1jb252ZXJzaW9uIjsKZXhwb3J0IGRlZmF1bHQgewogIGNyZWF0ZWQoKSB7CiAgICBjb25zdCBwYXRoID0gdGhpcy4kcm91dGUucGF0aDsKICAgIGNvbnN0IGFyciA9IHBhdGguc3BsaXQoIi8iKTsKICAgIGNvbnN0IGFydGljbGVJZCA9IGFyclsyXTsKICAgIGlmIChhcnRpY2xlSWQpIHsKICAgICAgdGhpcy5heGlvcy5nZXQoIi9hcGkvYWRtaW4vYXJ0aWNsZXMvIiArIGFydGljbGVJZCkudGhlbigoeyBkYXRhIH0pID0+IHsKICAgICAgICB0aGlzLmFydGljbGUgPSBkYXRhLmRhdGE7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgYXJ0aWNsZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImFydGljbGUiKTsKICAgICAgaWYgKGFydGljbGUpIHsKICAgICAgICB0aGlzLmFydGljbGUgPSBKU09OLnBhcnNlKGFydGljbGUpOwogICAgICB9CiAgICB9CiAgfSwKICBkZXN0cm95ZWQoKSB7CiAgICAvL+aWh+eroOiHquWKqOS/neWtmOWKn+iDvQogICAgLy8gdGhpcy5hdXRvU2F2ZUFydGljbGUoKTsKICB9LAogIGRhdGE6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgYWRkT3JFZGl0OiBmYWxzZSwKICAgICAgYXV0b1NhdmU6IHRydWUsCiAgICAgIGNhdGVnb3J5TmFtZTogIiIsCiAgICAgIHRhZ05hbWU6ICIiLAogICAgICBjYXRlZ29yeUxpc3Q6IFtdLAogICAgICB0YWdMaXN0OiBbXSwKICAgICAgdHlwZUxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICB0eXBlOiAxLAogICAgICAgICAgZGVzYzogIuWOn+WImyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHR5cGU6IDIsCiAgICAgICAgICBkZXNjOiAi6L2s6L29IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdHlwZTogMywKICAgICAgICAgIGRlc2M6ICLnv7vor5EiCiAgICAgICAgfQogICAgICBdLAogICAgICBhcnRpY2xlOiB7CiAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgYXJ0aWNsZVRpdGxlOiB0aGlzLiRtb21lbnQobmV3IERhdGUoKSkuZm9ybWF0KCJZWVlZLU1NLUREIiksCiAgICAgICAgYXJ0aWNsZUNvbnRlbnQ6ICIiLAogICAgICAgIGFydGljbGVDb3ZlcjogIiIsCiAgICAgICAgY2F0ZWdvcnlOYW1lOiBudWxsLAogICAgICAgIHRhZ05hbWVMaXN0OiBbXSwKICAgICAgICBvcmlnaW5hbFVybDogIiIsCiAgICAgICAgaXNUb3A6IDAsCiAgICAgICAgdHlwZTogMSwKICAgICAgICBzdGF0dXM6IDEKICAgICAgfQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGxpc3RDYXRlZ29yaWVzKCkgewogICAgICB0aGlzLmF4aW9zLmdldCgiL2FwaS9hZG1pbi9jYXRlZ29yaWVzL3NlYXJjaCIpLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAgICAgLy8gY29uc29sZS5sb2coImNhdGVnb3J5IiwgZGF0YSkKICAgICAgICB0aGlzLmNhdGVnb3J5TGlzdCA9IGRhdGEuZGF0YTsKICAgICAgfSk7CiAgICB9LAogICAgbGlzdFRhZ3MoKSB7CiAgICAgIHRoaXMuYXhpb3MuZ2V0KCIvYXBpL2FkbWluL3RhZ3Mvc2VhcmNoIikudGhlbigoeyBkYXRhIH0pID0+IHsKICAgICAgICB0aGlzLnRhZ0xpc3QgPSBkYXRhLmRhdGE7CiAgICAgIH0pOwogICAgfSwKICAgIG9wZW5Nb2RlbCgpIHsKICAgICAgaWYgKHRoaXMuYXJ0aWNsZS5hcnRpY2xlVGl0bGUudHJpbSgpID09ICIiKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcigi5paH56ug5qCH6aKY5LiN6IO95Li656m6Iik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmICh0aGlzLmFydGljbGUuYXJ0aWNsZUNvbnRlbnQudHJpbSgpID09ICIiKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcigi5paH56ug5YaF5a655LiN6IO95Li656m6Iik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHRoaXMubGlzdENhdGVnb3JpZXMoKTsKICAgICAgdGhpcy5saXN0VGFncygpOwogICAgICB0aGlzLmFkZE9yRWRpdCA9IHRydWU7CiAgICB9LAogICAgdXBsb2FkQ292ZXIocmVzcG9uc2UpIHsKICAgICAgY29uc29sZS5sb2coInVwbG9hZENvdmVyIiwgcmVzcG9uc2UpCiAgICAgIAogICAgICB0aGlzLmFydGljbGUuYXJ0aWNsZUNvdmVyID0gcmVzcG9uc2UuZGF0YTsKICAgIH0sCiAgICBiZWZvcmVVcGxvYWQoZmlsZSkgewogICAgICAgIGNvbnNvbGUubG9nKCJiZWZvcmVVcGxvYWQiLGZpbGUpCgogICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAgICAgaWYgKGZpbGUuc2l6ZSAvIDEwMjQgPCB0aGlzLmNvbmZpZy5VUExPQURfU0laRSkgewogICAgICAgICAgcmVzb2x2ZShmaWxlKTsKICAgICAgICB9CiAgICAgICAgLy8g5Y6L57yp5YiwMjAwS0Is6L+Z6YeM55qEMjAw5bCx5piv6KaB5Y6L57yp55qE5aSn5bCPLOWPr+iHquWumuS5iQogICAgICAgIGltYWdlQ29udmVyc2lvbgogICAgICAgICAgLmNvbXByZXNzQWNjdXJhdGVseShmaWxlLCB0aGlzLmNvbmZpZy5VUExPQURfU0laRSkKICAgICAgICAgIC50aGVuKHJlcyA9PiB7CiAgICAgICAgICAgIHJlc29sdmUocmVzKTsKICAgICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICB1cGxvYWRJbWcocG9zLCBmaWxlKSB7CiAgICAgIGNvbnNvbGUubG9nKCJ1cGxvYWRJbWciLGZpbGUpCgogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgaWYgKGZpbGUuc2l6ZSAvIDEwMjQgPCB0aGlzLmNvbmZpZy5VUExPQURfU0laRSkgewogICAgICAgIGZvcm1kYXRhLmFwcGVuZCgiZmlsZSIsIGZpbGUpOwogICAgICAgIGNvbnNvbGUubG9nKCJmb3JtZGF0YSIsIGZvcm1kYXRhKQoKICAgICAgICB0aGlzLmF4aW9zCiAgICAgICAgICAucG9zdCgiL2FwaS9hZG1pbi9hcnRpY2xlcy9pbWFnZXMiLCBmb3JtZGF0YSkKICAgICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZygiSW1hIikKICAgICAgICAgICAgdGhpcy4kcmVmcy5tZC4kaW1nMlVybChwb3MsIGRhdGEuZGF0YSk7CiAgICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyDljovnvKnliLAyMDBLQizov5nph4znmoQyMDDlsLHmmK/opoHljovnvKnnmoTlpKflsI8s5Y+v6Ieq5a6a5LmJCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmb3JtZGF0YSIsIGZvcm1kYXRhKQoKICAgICAgICBpbWFnZUNvbnZlcnNpb24KICAgICAgICAgIC5jb21wcmVzc0FjY3VyYXRlbHkoZmlsZSwgdGhpcy5jb25maWcuVVBMT0FEX1NJWkUpCiAgICAgICAgICAudGhlbihyZXMgPT4gewogICAgICAgICAgICBmb3JtZGF0YS5hcHBlbmQoCiAgICAgICAgICAgICAgImZpbGUiLAogICAgICAgICAgICAgIG5ldyB3aW5kb3cuRmlsZShbcmVzXSwgZmlsZS5uYW1lLCB7IHR5cGU6IGZpbGUudHlwZSB9KQogICAgICAgICAgICApOwogICAgICAgICAgICB0aGlzLmF4aW9zCiAgICAgICAgICAgICAgLnBvc3QoIi9hcGkvYWRtaW4vYXJ0aWNsZXMvaW1hZ2VzIiwgZm9ybWRhdGEpCiAgICAgICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiSW1hZ2VkYXRhIixkYXRhKQogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5tZC4kaW1nMlVybChwb3MsIGRhdGEuZGF0YSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHNhdmVBcnRpY2xlRHJhZnQoKSB7CiAgICAgIGlmICh0aGlzLmFydGljbGUuYXJ0aWNsZVRpdGxlLnRyaW0oKSA9PSAiIikgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuaWh+eroOagh+mimOS4jeiDveS4uuepuiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAodGhpcy5hcnRpY2xlLmFydGljbGVDb250ZW50LnRyaW0oKSA9PSAiIikgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuaWh+eroOWGheWuueS4jeiDveS4uuepuiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB0aGlzLmFydGljbGUuc3RhdHVzID0gMzsKICAgICAgdGhpcy5heGlvcy5wb3N0KCIvYXBpL2FkbWluL2FydGljbGVzIiwgdGhpcy5hcnRpY2xlKS50aGVuKCh7IGRhdGEgfSkgPT4gewogICAgICAgIGlmIChkYXRhLmZsYWcpIHsKICAgICAgICAgIHRoaXMuJG5vdGlmeS5zdWNjZXNzKHsKICAgICAgICAgICAgdGl0bGU6ICLmiJDlip8iLAogICAgICAgICAgICBtZXNzYWdlOiAi5L+d5a2Y6I2J56i/5oiQ5YqfIgogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJG5vdGlmeS5lcnJvcih7CiAgICAgICAgICAgIHRpdGxlOiAi5aSx6LSlIiwKICAgICAgICAgICAgbWVzc2FnZTogIuS/neWtmOiNieeov+Wksei0pSIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIC8v5YWz6Zet6Ieq5Yqo5L+d5a2Y5Yqf6IO9CiAgICAgIHRoaXMuYXV0b1NhdmUgPSBmYWxzZTsKICAgIH0sCiAgICBzYXZlT3JVcGRhdGVBcnRpY2xlKCkgewogICAgICBpZiAodGhpcy5hcnRpY2xlLmFydGljbGVUaXRsZS50cmltKCkgPT0gIiIpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCLmlofnq6DmoIfpopjkuI3og73kuLrnqboiKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuYXJ0aWNsZS5hcnRpY2xlQ29udGVudC50cmltKCkgPT0gIiIpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCLmlofnq6DlhoXlrrnkuI3og73kuLrnqboiKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuYXJ0aWNsZS5jYXRlZ29yeU5hbWUgPT0gbnVsbCkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuaWh+eroOWIhuexu+S4jeiDveS4uuepuiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAodGhpcy5hcnRpY2xlLnRhZ05hbWVMaXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcigi5paH56ug5qCH562+5LiN6IO95Li656m6Iik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmICh0aGlzLmFydGljbGUuYXJ0aWNsZUNvdmVyLnRyaW0oKSA9PSAiIikgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuaWh+eroOWwgemdouS4jeiDveS4uuepuiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBjb25zb2xlLmxvZygiYXJ0aWNsZSIsdGhpcy5hcnRpY2xlKQogICAgICB0aGlzLmF4aW9zLnBvc3QoIi9hcGkvYWRtaW4vYXJ0aWNsZXMiLCB0aGlzLmFydGljbGUpLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coZGF0YSkKICAgICAgICBpZiAoZGF0YS5mbGFnKSB7CiAgICAgICAgICB0aGlzLiRub3RpZnkuc3VjY2Vzcyh7CiAgICAgICAgICAgIHRpdGxlOiAi5oiQ5YqfIiwKICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tZXNzYWdlCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbm90aWZ5LmVycm9yKHsKICAgICAgICAgICAgdGl0bGU6ICLlpLHotKUiLAogICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1lc3NhZ2UKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICB0aGlzLmFkZE9yRWRpdCA9IGZhbHNlOwogICAgICB9KTsKICAgICAgLy/lhbPpl63oh6rliqjkv53lrZjlip/og70KICAgICAgdGhpcy5hdXRvU2F2ZSA9IGZhbHNlOwogICAgfSwKICAgIGF1dG9TYXZlQXJ0aWNsZSgpIHsKICAgICAgLy8g6Ieq5Yqo5LiK5Lyg5paH56ugCiAgICAgIGlmICgKICAgICAgICB0aGlzLmF1dG9TYXZlICYmCiAgICAgICAgdGhpcy5hcnRpY2xlLmFydGljbGVUaXRsZS50cmltKCkgIT0gIiIgJiYKICAgICAgICB0aGlzLmFydGljbGUuYXJ0aWNsZUNvbnRlbnQudHJpbSgpICE9ICIiICYmCiAgICAgICAgdGhpcy5hcnRpY2xlLmlkICE9IG51bGwKICAgICAgKSB7CiAgICAgICAgdGhpcy5heGlvcwogICAgICAgICAgLnBvc3QoIi9hcGkvYWRtaW4vYXJ0aWNsZXMiLCB0aGlzLmFydGljbGUpCiAgICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHsKICAgICAgICAgICAgaWYgKGRhdGEuZmxhZykgewogICAgICAgICAgICAgIHRoaXMuJG5vdGlmeS5zdWNjZXNzKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAi5oiQ5YqfIiwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICLoh6rliqjkv53lrZjmiJDlip8iCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5LmVycm9yKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAi5aSx6LSlIiwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICLoh6rliqjkv53lrZjlpLHotKUiCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICB9CiAgICAgIC8vIOS/neWtmOacrOWcsOaWh+eroOiusOW9lQogICAgICBpZiAodGhpcy5hdXRvU2F2ZSAmJiB0aGlzLmFydGljbGUuaWQgPT0gbnVsbCkgewogICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oImFydGljbGUiLCBKU09OLnN0cmluZ2lmeSh0aGlzLmFydGljbGUpKTsKICAgICAgfQogICAgfSwKICAgIHNlYXJjaENhdGVnb3JpZXMoa2V5d29yZHMsIGNiKSB7CiAgICAgIHRoaXMuYXhpb3MKICAgICAgICAuZ2V0KCIvYXBpL2FkbWluL2NhdGVnb3JpZXMvc2VhcmNoIiwgewogICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgIGtleXdvcmRzOiBrZXl3b3JkcwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB7CiAgICAgICAgICBjYihkYXRhLmRhdGEpOwogICAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZVNlbGVjdENhdGVnb3JpZXMoaXRlbSkgewogICAgICB0aGlzLmFkZENhdGVnb3J5KHsKICAgICAgICBjYXRlZ29yeU5hbWU6IGl0ZW0uY2F0ZWdvcnlOYW1lCiAgICAgIH0pOwogICAgfSwKICAgIHNhdmVDYXRlZ29yeSgpIHsKICAgICAgaWYgKHRoaXMuY2F0ZWdvcnlOYW1lLnRyaW0oKSAhPSAiIikgewogICAgICAgIHRoaXMuYWRkQ2F0ZWdvcnkoewogICAgICAgICAgY2F0ZWdvcnlOYW1lOiB0aGlzLmNhdGVnb3J5TmFtZQogICAgICAgIH0pOwogICAgICAgIHRoaXMuY2F0ZWdvcnlOYW1lID0gIiI7CiAgICAgIH0KICAgIH0sCiAgICBhZGRDYXRlZ29yeShpdGVtKSB7CiAgICAgIHRoaXMuYXJ0aWNsZS5jYXRlZ29yeU5hbWUgPSBpdGVtLmNhdGVnb3J5TmFtZTsKICAgIH0sCiAgICByZW1vdmVDYXRlZ29yeSgpIHsKICAgICAgdGhpcy5hcnRpY2xlLmNhdGVnb3J5TmFtZSA9IG51bGw7CiAgICB9LAogICAgc2VhcmNoVGFncyhrZXl3b3JkcywgY2IpIHsKICAgICAgdGhpcy5heGlvcwogICAgICAgIC5nZXQoIi9hcGkvYWRtaW4vdGFncy9zZWFyY2giLCB7CiAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAga2V5d29yZHM6IGtleXdvcmRzCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHsKICAgICAgICAgIGNiKGRhdGEuZGF0YSk7CiAgICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlU2VsZWN0VGFnKGl0ZW0pIHsKICAgICAgdGhpcy5hZGRUYWcoewogICAgICAgIHRhZ05hbWU6IGl0ZW0udGFnTmFtZQogICAgICB9KTsKICAgIH0sCiAgICBzYXZlVGFnKCkgewogICAgICBpZiAodGhpcy50YWdOYW1lLnRyaW0oKSAhPSAiIikgewogICAgICAgIHRoaXMuYWRkVGFnKHsKICAgICAgICAgIHRhZ05hbWU6IHRoaXMudGFnTmFtZQogICAgICAgIH0pOwogICAgICAgIHRoaXMudGFnTmFtZSA9ICIiOwogICAgICB9CiAgICB9LAogICAgYWRkVGFnKGl0ZW0pIHsKICAgICAgaWYgKHRoaXMuYXJ0aWNsZS50YWdOYW1lTGlzdC5pbmRleE9mKGl0ZW0udGFnTmFtZSkgPT0gLTEpIHsKICAgICAgICB0aGlzLmFydGljbGUudGFnTmFtZUxpc3QucHVzaChpdGVtLnRhZ05hbWUpOwogICAgICB9CiAgICB9LAogICAgcmVtb3ZlVGFnKGl0ZW0pIHsKICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmFydGljbGUudGFnTmFtZUxpc3QuaW5kZXhPZihpdGVtKTsKICAgICAgdGhpcy5hcnRpY2xlLnRhZ05hbWVMaXN0LnNwbGljZShpbmRleCwgMSk7CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgdGFnQ2xhc3MoKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmFydGljbGUudGFnTmFtZUxpc3QuaW5kZXhPZihpdGVtLnRhZ05hbWUpOwogICAgICAgIHJldHVybiBpbmRleCAhPSAtMSA/ICJ0YWctaXRlbS1zZWxlY3QiIDogInRhZy1pdGVtIjsKICAgICAgfTsKICAgIH0KICB9Cn07Cg=="},null]}